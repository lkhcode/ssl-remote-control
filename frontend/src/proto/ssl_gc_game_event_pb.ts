// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file ssl_gc_game_event.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Team } from "./ssl_gc_common_pb";
import { file_ssl_gc_common } from "./ssl_gc_common_pb";
import type { Vector2 } from "./ssl_gc_geometry_pb";
import { file_ssl_gc_geometry } from "./ssl_gc_geometry_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file ssl_gc_game_event.proto.
 */
export const file_ssl_gc_game_event: GenFile = /*@__PURE__*/
  fileDesc("", [file_ssl_gc_common, file_ssl_gc_geometry]);

/**
 * GameEvent contains exactly one game event
 * Each game event has optional and required fields. The required fields are mandatory to process the event.
 * Some optional fields are only used for visualization, others are required to determine the ball placement position.
 * If fields are missing that are required for the ball placement position, no ball placement command will be issued.
 * Fields are marked optional to make testing and extending of the protocol easier.
 * An autoRef should ideally set all fields, except if there are good reasons to not do so.
 *
 * @generated from message GameEvent
 */
export type GameEvent = Message<"GameEvent"> & {
  /**
   * A globally unique id of the game event.
   *
   * @generated from field: optional string id = 50;
   */
  id: string;

  /**
   * The type of the game event.
   *
   * @generated from field: optional GameEvent.Type type = 40;
   */
  type: GameEvent_Type;

  /**
   * The origins of this game event.
   * Empty, if it originates from game controller.
   * Contains autoRef name(s), if it originates from one or more autoRefs.
   * Ignored if sent by autoRef to game controller.
   *
   * @generated from field: repeated string origin = 41;
   */
  origin: string[];

  /**
   * Unix timestamp in microseconds when the event was created.
   *
   * @generated from field: optional uint64 created_timestamp = 49;
   */
  createdTimestamp: bigint;

  /**
   * the event that occurred
   *
   * @generated from oneof GameEvent.event
   */
  event: {
    /**
     * @generated from field: GameEvent.BallLeftField ball_left_field_touch_line = 6;
     */
    value: GameEvent_BallLeftField;
    case: "ballLeftFieldTouchLine";
  } | {
    /**
     * @generated from field: GameEvent.BallLeftField ball_left_field_goal_line = 7;
     */
    value: GameEvent_BallLeftField;
    case: "ballLeftFieldGoalLine";
  } | {
    /**
     * @generated from field: GameEvent.AimlessKick aimless_kick = 11;
     */
    value: GameEvent_AimlessKick;
    case: "aimlessKick";
  } | {
    /**
     * @generated from field: GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
     */
    value: GameEvent_AttackerTooCloseToDefenseArea;
    case: "attackerTooCloseToDefenseArea";
  } | {
    /**
     * @generated from field: GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
     */
    value: GameEvent_DefenderInDefenseArea;
    case: "defenderInDefenseArea";
  } | {
    /**
     * @generated from field: GameEvent.BoundaryCrossing boundary_crossing = 43;
     */
    value: GameEvent_BoundaryCrossing;
    case: "boundaryCrossing";
  } | {
    /**
     * @generated from field: GameEvent.KeeperHeldBall keeper_held_ball = 13;
     */
    value: GameEvent_KeeperHeldBall;
    case: "keeperHeldBall";
  } | {
    /**
     * @generated from field: GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
     */
    value: GameEvent_BotDribbledBallTooFar;
    case: "botDribbledBallTooFar";
  } | {
    /**
     * @generated from field: GameEvent.BotPushedBot bot_pushed_bot = 24;
     */
    value: GameEvent_BotPushedBot;
    case: "botPushedBot";
  } | {
    /**
     * @generated from field: GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
     */
    value: GameEvent_BotHeldBallDeliberately;
    case: "botHeldBallDeliberately";
  } | {
    /**
     * @generated from field: GameEvent.BotTippedOver bot_tipped_over = 27;
     */
    value: GameEvent_BotTippedOver;
    case: "botTippedOver";
  } | {
    /**
     * @generated from field: GameEvent.BotDroppedParts bot_dropped_parts = 51;
     */
    value: GameEvent_BotDroppedParts;
    case: "botDroppedParts";
  } | {
    /**
     * @generated from field: GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
     */
    value: GameEvent_AttackerTouchedBallInDefenseArea;
    case: "attackerTouchedBallInDefenseArea";
  } | {
    /**
     * @generated from field: GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
     */
    value: GameEvent_BotKickedBallTooFast;
    case: "botKickedBallTooFast";
  } | {
    /**
     * @generated from field: GameEvent.BotCrashUnique bot_crash_unique = 22;
     */
    value: GameEvent_BotCrashUnique;
    case: "botCrashUnique";
  } | {
    /**
     * @generated from field: GameEvent.BotCrashDrawn bot_crash_drawn = 21;
     */
    value: GameEvent_BotCrashDrawn;
    case: "botCrashDrawn";
  } | {
    /**
     * @generated from field: GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
     */
    value: GameEvent_DefenderTooCloseToKickPoint;
    case: "defenderTooCloseToKickPoint";
  } | {
    /**
     * @generated from field: GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
     */
    value: GameEvent_BotTooFastInStop;
    case: "botTooFastInStop";
  } | {
    /**
     * @generated from field: GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
     */
    value: GameEvent_BotInterferedPlacement;
    case: "botInterferedPlacement";
  } | {
    /**
     * @generated from field: GameEvent.Goal possible_goal = 39;
     */
    value: GameEvent_Goal;
    case: "possibleGoal";
  } | {
    /**
     * @generated from field: GameEvent.Goal goal = 8;
     */
    value: GameEvent_Goal;
    case: "goal";
  } | {
    /**
     * @generated from field: GameEvent.Goal invalid_goal = 44;
     */
    value: GameEvent_Goal;
    case: "invalidGoal";
  } | {
    /**
     * @generated from field: GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
     */
    value: GameEvent_AttackerDoubleTouchedBall;
    case: "attackerDoubleTouchedBall";
  } | {
    /**
     * @generated from field: GameEvent.PlacementSucceeded placement_succeeded = 5;
     */
    value: GameEvent_PlacementSucceeded;
    case: "placementSucceeded";
  } | {
    /**
     * @generated from field: GameEvent.PenaltyKickFailed penalty_kick_failed = 45;
     */
    value: GameEvent_PenaltyKickFailed;
    case: "penaltyKickFailed";
  } | {
    /**
     * @generated from field: GameEvent.NoProgressInGame no_progress_in_game = 2;
     */
    value: GameEvent_NoProgressInGame;
    case: "noProgressInGame";
  } | {
    /**
     * @generated from field: GameEvent.PlacementFailed placement_failed = 3;
     */
    value: GameEvent_PlacementFailed;
    case: "placementFailed";
  } | {
    /**
     * @generated from field: GameEvent.MultipleCards multiple_cards = 32;
     */
    value: GameEvent_MultipleCards;
    case: "multipleCards";
  } | {
    /**
     * @generated from field: GameEvent.MultipleFouls multiple_fouls = 34;
     */
    value: GameEvent_MultipleFouls;
    case: "multipleFouls";
  } | {
    /**
     * @generated from field: GameEvent.BotSubstitution bot_substitution = 37;
     */
    value: GameEvent_BotSubstitution;
    case: "botSubstitution";
  } | {
    /**
     * @generated from field: GameEvent.ExcessiveBotSubstitution excessive_bot_substitution = 52;
     */
    value: GameEvent_ExcessiveBotSubstitution;
    case: "excessiveBotSubstitution";
  } | {
    /**
     * @generated from field: GameEvent.TooManyRobots too_many_robots = 38;
     */
    value: GameEvent_TooManyRobots;
    case: "tooManyRobots";
  } | {
    /**
     * @generated from field: GameEvent.ChallengeFlag challenge_flag = 46;
     */
    value: GameEvent_ChallengeFlag;
    case: "challengeFlag";
  } | {
    /**
     * @generated from field: GameEvent.ChallengeFlagHandled challenge_flag_handled = 48;
     */
    value: GameEvent_ChallengeFlagHandled;
    case: "challengeFlagHandled";
  } | {
    /**
     * @generated from field: GameEvent.EmergencyStop emergency_stop = 47;
     */
    value: GameEvent_EmergencyStop;
    case: "emergencyStop";
  } | {
    /**
     * @generated from field: GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
     */
    value: GameEvent_UnsportingBehaviorMinor;
    case: "unsportingBehaviorMinor";
  } | {
    /**
     * @generated from field: GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
     */
    value: GameEvent_UnsportingBehaviorMajor;
    case: "unsportingBehaviorMajor";
  } | {
    /**
     * replaced by ready_to_continue flag
     *
     * @generated from field: GameEvent.Prepared prepared = 1 [deprecated = true];
     * @deprecated
     */
    value: GameEvent_Prepared;
    case: "prepared";
  } | {
    /**
     * obsolete
     *
     * @generated from field: GameEvent.IndirectGoal indirect_goal = 9;
     */
    value: GameEvent_IndirectGoal;
    case: "indirectGoal";
  } | {
    /**
     * replaced by the meta-information in the possible_goal event
     *
     * @generated from field: GameEvent.ChippedGoal chipped_goal = 10 [deprecated = true];
     * @deprecated
     */
    value: GameEvent_ChippedGoal;
    case: "chippedGoal";
  } | {
    /**
     * obsolete
     *
     * @generated from field: GameEvent.KickTimeout kick_timeout = 12 [deprecated = true];
     * @deprecated
     */
    value: GameEvent_KickTimeout;
    case: "kickTimeout";
  } | {
    /**
     * rule removed
     *
     * @generated from field: GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16;
     */
    value: GameEvent_AttackerTouchedOpponentInDefenseArea;
    case: "attackerTouchedOpponentInDefenseArea";
  } | {
    /**
     * obsolete
     *
     * @generated from field: GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42;
     */
    value: GameEvent_AttackerTouchedOpponentInDefenseArea;
    case: "attackerTouchedOpponentInDefenseAreaSkipped";
  } | {
    /**
     * obsolete
     *
     * @generated from field: GameEvent.BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true];
     * @deprecated
     */
    value: GameEvent_BotCrashUnique;
    case: "botCrashUniqueSkipped";
  } | {
    /**
     * can not be used as long as autoRefs do not judge pushing
     *
     * @generated from field: GameEvent.BotPushedBot bot_pushed_bot_skipped = 25 [deprecated = true];
     * @deprecated
     */
    value: GameEvent_BotPushedBot;
    case: "botPushedBotSkipped";
  } | {
    /**
     * rule removed
     *
     * @generated from field: GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30;
     */
    value: GameEvent_DefenderInDefenseAreaPartially;
    case: "defenderInDefenseAreaPartially";
  } | {
    /**
     * the referee msg already indicates this
     *
     * @generated from field: GameEvent.MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true];
     * @deprecated
     */
    value: GameEvent_MultiplePlacementFailures;
    case: "multiplePlacementFailures";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message GameEvent.
 * Use `create(GameEventSchema)` to create a new message.
 */
export const GameEventSchema: GenMessage<GameEvent> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0);

/**
 * the ball left the field normally
 *
 * @generated from message GameEvent.BallLeftField
 */
export type GameEvent_BallLeftField = Message<"GameEvent.BallLeftField"> & {
  /**
   * the team that last touched the ball
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that last touched the ball
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location where the ball left the field [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;
};

/**
 * Describes the message GameEvent.BallLeftField.
 * Use `create(GameEvent_BallLeftFieldSchema)` to create a new message.
 */
export const GameEvent_BallLeftFieldSchema: GenMessage<GameEvent_BallLeftField> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 0);

/**
 * the ball left the field via goal line and a team committed an aimless kick
 *
 * @generated from message GameEvent.AimlessKick
 */
export type GameEvent_AimlessKick = Message<"GameEvent.AimlessKick"> & {
  /**
   * the team that last touched the ball
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that last touched the ball
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location where the ball left the field [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the location where the ball was last touched [m]
   *
   * @generated from field: optional Vector2 kick_location = 4;
   */
  kickLocation?: Vector2;
};

/**
 * Describes the message GameEvent.AimlessKick.
 * Use `create(GameEvent_AimlessKickSchema)` to create a new message.
 */
export const GameEvent_AimlessKickSchema: GenMessage<GameEvent_AimlessKick> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 1);

/**
 * a team shot a goal
 *
 * @generated from message GameEvent.Goal
 */
export type GameEvent_Goal = Message<"GameEvent.Goal"> & {
  /**
   * the team that scored the goal
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the team that shot the goal (different from by_team for own goals)
   *
   * @generated from field: optional Team kicking_team = 6;
   */
  kickingTeam: Team;

  /**
   * the bot that shot the goal
   *
   * @generated from field: optional uint32 kicking_bot = 2;
   */
  kickingBot: number;

  /**
   * the location where the ball entered the goal [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the location where the ball was kicked (for deciding if this was a valid goal) [m]
   *
   * @generated from field: optional Vector2 kick_location = 4;
   */
  kickLocation?: Vector2;

  /**
   * the maximum height the ball reached during the goal kick (for deciding if this was a valid goal) [m]
   *
   * @generated from field: optional float max_ball_height = 5;
   */
  maxBallHeight: number;

  /**
   * number of robots of scoring team when the ball entered the goal (for deciding if this was a valid goal)
   *
   * @generated from field: optional uint32 num_robots_by_team = 7;
   */
  numRobotsByTeam: number;

  /**
   * The UNIX timestamp [μs] when the scoring team last touched the ball
   *
   * @generated from field: optional uint64 last_touch_by_team = 8;
   */
  lastTouchByTeam: bigint;

  /**
   * An additional message with e.g. a reason for invalid goals
   *
   * @generated from field: optional string message = 9;
   */
  message: string;
};

/**
 * Describes the message GameEvent.Goal.
 * Use `create(GameEvent_GoalSchema)` to create a new message.
 */
export const GameEvent_GoalSchema: GenMessage<GameEvent_Goal> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 2);

/**
 * the ball entered the goal directly during an indirect free kick
 *
 * @generated from message GameEvent.IndirectGoal
 */
export type GameEvent_IndirectGoal = Message<"GameEvent.IndirectGoal"> & {
  /**
   * the team that tried to shoot the goal
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that kicked the ball - at least the team must be set
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location where the ball entered the goal [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the location where the ball was kicked [m]
   *
   * @generated from field: optional Vector2 kick_location = 4;
   */
  kickLocation?: Vector2;
};

/**
 * Describes the message GameEvent.IndirectGoal.
 * Use `create(GameEvent_IndirectGoalSchema)` to create a new message.
 */
export const GameEvent_IndirectGoalSchema: GenMessage<GameEvent_IndirectGoal> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 3);

/**
 * the ball entered the goal, but was initially chipped
 *
 * @generated from message GameEvent.ChippedGoal
 */
export type GameEvent_ChippedGoal = Message<"GameEvent.ChippedGoal"> & {
  /**
   * the team that tried to shoot the goal
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that kicked the ball
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location where the ball entered the goal [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the location where the ball was kicked [m]
   *
   * @generated from field: optional Vector2 kick_location = 4;
   */
  kickLocation?: Vector2;

  /**
   * the maximum height [m] of the ball, before it entered the goal and since the last kick [m]
   *
   * @generated from field: optional float max_ball_height = 5;
   */
  maxBallHeight: number;
};

/**
 * Describes the message GameEvent.ChippedGoal.
 * Use `create(GameEvent_ChippedGoalSchema)` to create a new message.
 */
export const GameEvent_ChippedGoalSchema: GenMessage<GameEvent_ChippedGoal> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 4);

/**
 * a bot moved too fast while the game was stopped
 *
 * @generated from message GameEvent.BotTooFastInStop
 */
export type GameEvent_BotTooFastInStop = Message<"GameEvent.BotTooFastInStop"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that was too fast
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location of the bot [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the bot speed [m/s]
   *
   * @generated from field: optional float speed = 4;
   */
  speed: number;
};

/**
 * Describes the message GameEvent.BotTooFastInStop.
 * Use `create(GameEvent_BotTooFastInStopSchema)` to create a new message.
 */
export const GameEvent_BotTooFastInStopSchema: GenMessage<GameEvent_BotTooFastInStop> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 5);

/**
 * a bot of the defending team got too close to the kick point during a free kick
 *
 * @generated from message GameEvent.DefenderTooCloseToKickPoint
 */
export type GameEvent_DefenderTooCloseToKickPoint = Message<"GameEvent.DefenderTooCloseToKickPoint"> & {
  /**
   * the team that was found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that violates the distance to the kick point
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location of the bot [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the distance [m] from bot to the kick point (including the minimum radius)
   *
   * @generated from field: optional float distance = 4;
   */
  distance: number;
};

/**
 * Describes the message GameEvent.DefenderTooCloseToKickPoint.
 * Use `create(GameEvent_DefenderTooCloseToKickPointSchema)` to create a new message.
 */
export const GameEvent_DefenderTooCloseToKickPointSchema: GenMessage<GameEvent_DefenderTooCloseToKickPoint> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 6);

/**
 * two robots crashed into each other with similar speeds
 *
 * @generated from message GameEvent.BotCrashDrawn
 */
export type GameEvent_BotCrashDrawn = Message<"GameEvent.BotCrashDrawn"> & {
  /**
   * the bot of the yellow team
   *
   * @generated from field: optional uint32 bot_yellow = 1;
   */
  botYellow: number;

  /**
   * the bot of the blue team
   *
   * @generated from field: optional uint32 bot_blue = 2;
   */
  botBlue: number;

  /**
   * the location of the crash (center between both bots) [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the calculated crash speed [m/s] of the two bots
   *
   * @generated from field: optional float crash_speed = 4;
   */
  crashSpeed: number;

  /**
   * the difference [m/s] of the velocity of the two bots
   *
   * @generated from field: optional float speed_diff = 5;
   */
  speedDiff: number;

  /**
   * the angle [rad] in the range [0, π] of the bot velocity vectors
   * an angle of 0 rad (  0°) means, the bots barely touched each other
   * an angle of π rad (180°) means, the bots crashed frontal into each other
   *
   * @generated from field: optional float crash_angle = 6;
   */
  crashAngle: number;
};

/**
 * Describes the message GameEvent.BotCrashDrawn.
 * Use `create(GameEvent_BotCrashDrawnSchema)` to create a new message.
 */
export const GameEvent_BotCrashDrawnSchema: GenMessage<GameEvent_BotCrashDrawn> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 7);

/**
 * two robots crashed into each other and one team was found guilty to due significant speed difference
 *
 * @generated from message GameEvent.BotCrashUnique
 */
export type GameEvent_BotCrashUnique = Message<"GameEvent.BotCrashUnique"> & {
  /**
   * the team that caused the crash
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that caused the crash
   *
   * @generated from field: optional uint32 violator = 2;
   */
  violator: number;

  /**
   * the bot of the opposite team that was involved in the crash
   *
   * @generated from field: optional uint32 victim = 3;
   */
  victim: number;

  /**
   * the location of the crash (center between both bots) [m]
   *
   * @generated from field: optional Vector2 location = 4;
   */
  location?: Vector2;

  /**
   * the calculated crash speed vector [m/s] of the two bots
   *
   * @generated from field: optional float crash_speed = 5;
   */
  crashSpeed: number;

  /**
   * the difference [m/s] of the velocity of the two bots
   *
   * @generated from field: optional float speed_diff = 6;
   */
  speedDiff: number;

  /**
   * the angle [rad] in the range [0, π] of the bot velocity vectors
   * an angle of 0 rad (  0°) means, the bots barely touched each other
   * an angle of π rad (180°) means, the bots crashed frontal into each other
   *
   * @generated from field: optional float crash_angle = 7;
   */
  crashAngle: number;
};

/**
 * Describes the message GameEvent.BotCrashUnique.
 * Use `create(GameEvent_BotCrashUniqueSchema)` to create a new message.
 */
export const GameEvent_BotCrashUniqueSchema: GenMessage<GameEvent_BotCrashUnique> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 8);

/**
 * a bot pushed another bot over a significant distance
 *
 * @generated from message GameEvent.BotPushedBot
 */
export type GameEvent_BotPushedBot = Message<"GameEvent.BotPushedBot"> & {
  /**
   * the team that pushed the other team
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that pushed the other bot
   *
   * @generated from field: optional uint32 violator = 2;
   */
  violator: number;

  /**
   * the bot of the opposite team that was pushed
   *
   * @generated from field: optional uint32 victim = 3;
   */
  victim: number;

  /**
   * the location of the push (center between both bots) [m]
   *
   * @generated from field: optional Vector2 location = 4;
   */
  location?: Vector2;

  /**
   * the pushed distance [m]
   *
   * @generated from field: optional float pushed_distance = 5;
   */
  pushedDistance: number;
};

/**
 * Describes the message GameEvent.BotPushedBot.
 * Use `create(GameEvent_BotPushedBotSchema)` to create a new message.
 */
export const GameEvent_BotPushedBotSchema: GenMessage<GameEvent_BotPushedBot> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 9);

/**
 * a bot tipped over
 *
 * @generated from message GameEvent.BotTippedOver
 */
export type GameEvent_BotTippedOver = Message<"GameEvent.BotTippedOver"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that tipped over
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location of the bot [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the location of the ball at the moment when this foul occurred [m]
   *
   * @generated from field: optional Vector2 ball_location = 4;
   */
  ballLocation?: Vector2;
};

/**
 * Describes the message GameEvent.BotTippedOver.
 * Use `create(GameEvent_BotTippedOverSchema)` to create a new message.
 */
export const GameEvent_BotTippedOverSchema: GenMessage<GameEvent_BotTippedOver> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 10);

/**
 * a bot dropped parts
 *
 * @generated from message GameEvent.BotDroppedParts
 */
export type GameEvent_BotDroppedParts = Message<"GameEvent.BotDroppedParts"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that dropped the parts
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location where the parts were dropped [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the location of the ball at the moment when this foul occurred [m]
   *
   * @generated from field: optional Vector2 ball_location = 4;
   */
  ballLocation?: Vector2;
};

/**
 * Describes the message GameEvent.BotDroppedParts.
 * Use `create(GameEvent_BotDroppedPartsSchema)` to create a new message.
 */
export const GameEvent_BotDroppedPartsSchema: GenMessage<GameEvent_BotDroppedParts> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 11);

/**
 * a defender other than the keeper was fully located inside its own defense and touched the ball
 *
 * @generated from message GameEvent.DefenderInDefenseArea
 */
export type GameEvent_DefenderInDefenseArea = Message<"GameEvent.DefenderInDefenseArea"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that is inside the penalty area
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location of the bot [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the distance [m] from bot case to the nearest point outside the defense area
   *
   * @generated from field: optional float distance = 4;
   */
  distance: number;
};

/**
 * Describes the message GameEvent.DefenderInDefenseArea.
 * Use `create(GameEvent_DefenderInDefenseAreaSchema)` to create a new message.
 */
export const GameEvent_DefenderInDefenseAreaSchema: GenMessage<GameEvent_DefenderInDefenseArea> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 12);

/**
 * a defender other than the keeper was partially located inside its own defense area and touched the ball
 *
 * @generated from message GameEvent.DefenderInDefenseAreaPartially
 */
export type GameEvent_DefenderInDefenseAreaPartially = Message<"GameEvent.DefenderInDefenseAreaPartially"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that is partially inside the penalty area
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location of the bot
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the distance [m] that the bot is inside the penalty area
   *
   * @generated from field: optional float distance = 4;
   */
  distance: number;

  /**
   * the location of the ball at the moment when this foul occurred [m]
   *
   * @generated from field: optional Vector2 ball_location = 5;
   */
  ballLocation?: Vector2;
};

/**
 * Describes the message GameEvent.DefenderInDefenseAreaPartially.
 * Use `create(GameEvent_DefenderInDefenseAreaPartiallySchema)` to create a new message.
 */
export const GameEvent_DefenderInDefenseAreaPartiallySchema: GenMessage<GameEvent_DefenderInDefenseAreaPartially> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 13);

/**
 * an attacker touched the ball inside the opponent defense area
 *
 * @generated from message GameEvent.AttackerTouchedBallInDefenseArea
 */
export type GameEvent_AttackerTouchedBallInDefenseArea = Message<"GameEvent.AttackerTouchedBallInDefenseArea"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that is inside the penalty area
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location of the bot [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the distance [m] that the bot is inside the penalty area
   *
   * @generated from field: optional float distance = 4;
   */
  distance: number;
};

/**
 * Describes the message GameEvent.AttackerTouchedBallInDefenseArea.
 * Use `create(GameEvent_AttackerTouchedBallInDefenseAreaSchema)` to create a new message.
 */
export const GameEvent_AttackerTouchedBallInDefenseAreaSchema: GenMessage<GameEvent_AttackerTouchedBallInDefenseArea> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 14);

/**
 * a bot kicked the ball too fast
 *
 * @generated from message GameEvent.BotKickedBallTooFast
 */
export type GameEvent_BotKickedBallTooFast = Message<"GameEvent.BotKickedBallTooFast"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that kicked too fast
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location of the ball at the time of the highest speed [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the absolute initial ball speed (kick speed) [m/s]
   *
   * @generated from field: optional float initial_ball_speed = 4;
   */
  initialBallSpeed: number;

  /**
   * was the ball chipped?
   *
   * @generated from field: optional bool chipped = 5;
   */
  chipped: boolean;
};

/**
 * Describes the message GameEvent.BotKickedBallTooFast.
 * Use `create(GameEvent_BotKickedBallTooFastSchema)` to create a new message.
 */
export const GameEvent_BotKickedBallTooFastSchema: GenMessage<GameEvent_BotKickedBallTooFast> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 15);

/**
 * a bot dribbled to ball too far
 *
 * @generated from message GameEvent.BotDribbledBallTooFar
 */
export type GameEvent_BotDribbledBallTooFar = Message<"GameEvent.BotDribbledBallTooFar"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that dribbled too far
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location where the dribbling started [m]
   *
   * @generated from field: optional Vector2 start = 3;
   */
  start?: Vector2;

  /**
   * the location where the maximum dribbling distance was reached [m]
   *
   * @generated from field: optional Vector2 end = 4;
   */
  end?: Vector2;
};

/**
 * Describes the message GameEvent.BotDribbledBallTooFar.
 * Use `create(GameEvent_BotDribbledBallTooFarSchema)` to create a new message.
 */
export const GameEvent_BotDribbledBallTooFarSchema: GenMessage<GameEvent_BotDribbledBallTooFar> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 16);

/**
 * an attacker touched the opponent robot inside defense area
 *
 * @generated from message GameEvent.AttackerTouchedOpponentInDefenseArea
 */
export type GameEvent_AttackerTouchedOpponentInDefenseArea = Message<"GameEvent.AttackerTouchedOpponentInDefenseArea"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that touched the opponent robot
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the bot of the opposite team that was touched
   *
   * @generated from field: optional uint32 victim = 4;
   */
  victim: number;

  /**
   * the location of the contact point between both bots [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;
};

/**
 * Describes the message GameEvent.AttackerTouchedOpponentInDefenseArea.
 * Use `create(GameEvent_AttackerTouchedOpponentInDefenseAreaSchema)` to create a new message.
 */
export const GameEvent_AttackerTouchedOpponentInDefenseAreaSchema: GenMessage<GameEvent_AttackerTouchedOpponentInDefenseArea> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 17);

/**
 * an attacker touched the ball multiple times when it was not allowed to
 *
 * @generated from message GameEvent.AttackerDoubleTouchedBall
 */
export type GameEvent_AttackerDoubleTouchedBall = Message<"GameEvent.AttackerDoubleTouchedBall"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that touched the ball twice
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location of the ball when it was first touched [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;
};

/**
 * Describes the message GameEvent.AttackerDoubleTouchedBall.
 * Use `create(GameEvent_AttackerDoubleTouchedBallSchema)` to create a new message.
 */
export const GameEvent_AttackerDoubleTouchedBallSchema: GenMessage<GameEvent_AttackerDoubleTouchedBall> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 18);

/**
 * an attacker was located too near to the opponent defense area during stop or free kick
 *
 * @generated from message GameEvent.AttackerTooCloseToDefenseArea
 */
export type GameEvent_AttackerTooCloseToDefenseArea = Message<"GameEvent.AttackerTooCloseToDefenseArea"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that is too close to the defense area
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location of the bot [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the distance [m] of the bot to the penalty area
   *
   * @generated from field: optional float distance = 4;
   */
  distance: number;

  /**
   * the location of the ball at the moment when this foul occurred [m]
   *
   * @generated from field: optional Vector2 ball_location = 5;
   */
  ballLocation?: Vector2;
};

/**
 * Describes the message GameEvent.AttackerTooCloseToDefenseArea.
 * Use `create(GameEvent_AttackerTooCloseToDefenseAreaSchema)` to create a new message.
 */
export const GameEvent_AttackerTooCloseToDefenseAreaSchema: GenMessage<GameEvent_AttackerTooCloseToDefenseArea> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 19);

/**
 * a bot held the ball for too long
 *
 * @generated from message GameEvent.BotHeldBallDeliberately
 */
export type GameEvent_BotHeldBallDeliberately = Message<"GameEvent.BotHeldBallDeliberately"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that holds the ball
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location of the ball [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;

  /**
   * the duration [s] that the bot hold the ball
   *
   * @generated from field: optional float duration = 4;
   */
  duration: number;
};

/**
 * Describes the message GameEvent.BotHeldBallDeliberately.
 * Use `create(GameEvent_BotHeldBallDeliberatelySchema)` to create a new message.
 */
export const GameEvent_BotHeldBallDeliberatelySchema: GenMessage<GameEvent_BotHeldBallDeliberately> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 20);

/**
 * a bot interfered the ball placement of the other team
 *
 * @generated from message GameEvent.BotInterferedPlacement
 */
export type GameEvent_BotInterferedPlacement = Message<"GameEvent.BotInterferedPlacement"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the bot that interfered the placement
   *
   * @generated from field: optional uint32 by_bot = 2;
   */
  byBot: number;

  /**
   * the location of the bot [m]
   *
   * @generated from field: optional Vector2 location = 3;
   */
  location?: Vector2;
};

/**
 * Describes the message GameEvent.BotInterferedPlacement.
 * Use `create(GameEvent_BotInterferedPlacementSchema)` to create a new message.
 */
export const GameEvent_BotInterferedPlacementSchema: GenMessage<GameEvent_BotInterferedPlacement> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 21);

/**
 * a team collected multiple yellow cards
 *
 * @generated from message GameEvent.MultipleCards
 */
export type GameEvent_MultipleCards = Message<"GameEvent.MultipleCards"> & {
  /**
   * the team that received multiple yellow cards
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;
};

/**
 * Describes the message GameEvent.MultipleCards.
 * Use `create(GameEvent_MultipleCardsSchema)` to create a new message.
 */
export const GameEvent_MultipleCardsSchema: GenMessage<GameEvent_MultipleCards> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 22);

/**
 * a team collected multiple fouls, which results in a yellow card
 *
 * @generated from message GameEvent.MultipleFouls
 */
export type GameEvent_MultipleFouls = Message<"GameEvent.MultipleFouls"> & {
  /**
   * the team that collected multiple fouls
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the list of game events that caused the multiple fouls
   *
   * @generated from field: repeated GameEvent caused_game_events = 2;
   */
  causedGameEvents: GameEvent[];
};

/**
 * Describes the message GameEvent.MultipleFouls.
 * Use `create(GameEvent_MultipleFoulsSchema)` to create a new message.
 */
export const GameEvent_MultipleFoulsSchema: GenMessage<GameEvent_MultipleFouls> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 23);

/**
 * a team failed to place the ball multiple times in a row
 *
 * @generated from message GameEvent.MultiplePlacementFailures
 */
export type GameEvent_MultiplePlacementFailures = Message<"GameEvent.MultiplePlacementFailures"> & {
  /**
   * the team that failed multiple times
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;
};

/**
 * Describes the message GameEvent.MultiplePlacementFailures.
 * Use `create(GameEvent_MultiplePlacementFailuresSchema)` to create a new message.
 */
export const GameEvent_MultiplePlacementFailuresSchema: GenMessage<GameEvent_MultiplePlacementFailures> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 24);

/**
 * timeout waiting for the attacking team to perform the free kick
 *
 * @generated from message GameEvent.KickTimeout
 */
export type GameEvent_KickTimeout = Message<"GameEvent.KickTimeout"> & {
  /**
   * the team that that should have kicked
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the location of the ball [m]
   *
   * @generated from field: optional Vector2 location = 2;
   */
  location?: Vector2;

  /**
   * the time [s] that was waited
   *
   * @generated from field: optional float time = 3;
   */
  time: number;
};

/**
 * Describes the message GameEvent.KickTimeout.
 * Use `create(GameEvent_KickTimeoutSchema)` to create a new message.
 */
export const GameEvent_KickTimeoutSchema: GenMessage<GameEvent_KickTimeout> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 25);

/**
 * game was stuck
 *
 * @generated from message GameEvent.NoProgressInGame
 */
export type GameEvent_NoProgressInGame = Message<"GameEvent.NoProgressInGame"> & {
  /**
   * the location of the ball
   *
   * @generated from field: optional Vector2 location = 1;
   */
  location?: Vector2;

  /**
   * the time [s] that was waited
   *
   * @generated from field: optional float time = 2;
   */
  time: number;
};

/**
 * Describes the message GameEvent.NoProgressInGame.
 * Use `create(GameEvent_NoProgressInGameSchema)` to create a new message.
 */
export const GameEvent_NoProgressInGameSchema: GenMessage<GameEvent_NoProgressInGame> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 26);

/**
 * ball placement failed
 *
 * @generated from message GameEvent.PlacementFailed
 */
export type GameEvent_PlacementFailed = Message<"GameEvent.PlacementFailed"> & {
  /**
   * the team that failed
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the remaining distance [m] from ball to placement position
   *
   * @generated from field: optional float remaining_distance = 2;
   */
  remainingDistance: number;

  /**
   * the distance [m] of the nearest own robot to the ball
   *
   * @generated from field: optional float nearest_own_bot_distance = 3;
   */
  nearestOwnBotDistance: number;
};

/**
 * Describes the message GameEvent.PlacementFailed.
 * Use `create(GameEvent_PlacementFailedSchema)` to create a new message.
 */
export const GameEvent_PlacementFailedSchema: GenMessage<GameEvent_PlacementFailed> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 27);

/**
 * a team was found guilty for minor unsporting behavior
 *
 * @generated from message GameEvent.UnsportingBehaviorMinor
 */
export type GameEvent_UnsportingBehaviorMinor = Message<"GameEvent.UnsportingBehaviorMinor"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * an explanation of the situation and decision
   *
   * @generated from field: required string reason = 2;
   */
  reason: string;
};

/**
 * Describes the message GameEvent.UnsportingBehaviorMinor.
 * Use `create(GameEvent_UnsportingBehaviorMinorSchema)` to create a new message.
 */
export const GameEvent_UnsportingBehaviorMinorSchema: GenMessage<GameEvent_UnsportingBehaviorMinor> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 28);

/**
 * a team was found guilty for major unsporting behavior
 *
 * @generated from message GameEvent.UnsportingBehaviorMajor
 */
export type GameEvent_UnsportingBehaviorMajor = Message<"GameEvent.UnsportingBehaviorMajor"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * an explanation of the situation and decision
   *
   * @generated from field: required string reason = 2;
   */
  reason: string;
};

/**
 * Describes the message GameEvent.UnsportingBehaviorMajor.
 * Use `create(GameEvent_UnsportingBehaviorMajorSchema)` to create a new message.
 */
export const GameEvent_UnsportingBehaviorMajorSchema: GenMessage<GameEvent_UnsportingBehaviorMajor> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 29);

/**
 * a keeper held the ball in its defense area for too long
 *
 * @generated from message GameEvent.KeeperHeldBall
 */
export type GameEvent_KeeperHeldBall = Message<"GameEvent.KeeperHeldBall"> & {
  /**
   * the team that found guilty
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the location of the ball [m]
   *
   * @generated from field: optional Vector2 location = 2;
   */
  location?: Vector2;

  /**
   * the duration [s] that the keeper hold the ball
   *
   * @generated from field: optional float duration = 3;
   */
  duration: number;
};

/**
 * Describes the message GameEvent.KeeperHeldBall.
 * Use `create(GameEvent_KeeperHeldBallSchema)` to create a new message.
 */
export const GameEvent_KeeperHeldBallSchema: GenMessage<GameEvent_KeeperHeldBall> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 30);

/**
 * a team successfully placed the ball
 *
 * @generated from message GameEvent.PlacementSucceeded
 */
export type GameEvent_PlacementSucceeded = Message<"GameEvent.PlacementSucceeded"> & {
  /**
   * the team that did the placement
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the time [s] taken for placing the ball
   *
   * @generated from field: optional float time_taken = 2;
   */
  timeTaken: number;

  /**
   * the distance [m] between placement location and actual ball position
   *
   * @generated from field: optional float precision = 3;
   */
  precision: number;

  /**
   * the distance [m] between the initial ball location and the placement position
   *
   * @generated from field: optional float distance = 4;
   */
  distance: number;
};

/**
 * Describes the message GameEvent.PlacementSucceeded.
 * Use `create(GameEvent_PlacementSucceededSchema)` to create a new message.
 */
export const GameEvent_PlacementSucceededSchema: GenMessage<GameEvent_PlacementSucceeded> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 31);

/**
 * both teams are prepared - all conditions are met to continue (with kickoff or penalty kick)
 *
 * @generated from message GameEvent.Prepared
 */
export type GameEvent_Prepared = Message<"GameEvent.Prepared"> & {
  /**
   * the time [s] taken for preparing
   *
   * @generated from field: optional float time_taken = 1;
   */
  timeTaken: number;
};

/**
 * Describes the message GameEvent.Prepared.
 * Use `create(GameEvent_PreparedSchema)` to create a new message.
 */
export const GameEvent_PreparedSchema: GenMessage<GameEvent_Prepared> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 32);

/**
 * bots are being substituted by a team
 *
 * @generated from message GameEvent.BotSubstitution
 */
export type GameEvent_BotSubstitution = Message<"GameEvent.BotSubstitution"> & {
  /**
   * the team that substitutes robots
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;
};

/**
 * Describes the message GameEvent.BotSubstitution.
 * Use `create(GameEvent_BotSubstitutionSchema)` to create a new message.
 */
export const GameEvent_BotSubstitutionSchema: GenMessage<GameEvent_BotSubstitution> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 33);

/**
 * A foul for excessive bot substitutions
 *
 * @generated from message GameEvent.ExcessiveBotSubstitution
 */
export type GameEvent_ExcessiveBotSubstitution = Message<"GameEvent.ExcessiveBotSubstitution"> & {
  /**
   * the team that substitutes robots
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;
};

/**
 * Describes the message GameEvent.ExcessiveBotSubstitution.
 * Use `create(GameEvent_ExcessiveBotSubstitutionSchema)` to create a new message.
 */
export const GameEvent_ExcessiveBotSubstitutionSchema: GenMessage<GameEvent_ExcessiveBotSubstitution> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 34);

/**
 * A challenge flag, requested by a team previously, is flagged
 *
 * @generated from message GameEvent.ChallengeFlag
 */
export type GameEvent_ChallengeFlag = Message<"GameEvent.ChallengeFlag"> & {
  /**
   * the team that requested the challenge flag
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;
};

/**
 * Describes the message GameEvent.ChallengeFlag.
 * Use `create(GameEvent_ChallengeFlagSchema)` to create a new message.
 */
export const GameEvent_ChallengeFlagSchema: GenMessage<GameEvent_ChallengeFlag> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 35);

/**
 * A challenge, flagged recently, has been handled by the referee
 *
 * @generated from message GameEvent.ChallengeFlagHandled
 */
export type GameEvent_ChallengeFlagHandled = Message<"GameEvent.ChallengeFlagHandled"> & {
  /**
   * the team that requested the challenge flag
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the challenge was accepted by the referee
   *
   * @generated from field: required bool accepted = 2;
   */
  accepted: boolean;
};

/**
 * Describes the message GameEvent.ChallengeFlagHandled.
 * Use `create(GameEvent_ChallengeFlagHandledSchema)` to create a new message.
 */
export const GameEvent_ChallengeFlagHandledSchema: GenMessage<GameEvent_ChallengeFlagHandled> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 36);

/**
 * An emergency stop, requested by team previously, occurred
 *
 * @generated from message GameEvent.EmergencyStop
 */
export type GameEvent_EmergencyStop = Message<"GameEvent.EmergencyStop"> & {
  /**
   * the team that substitutes robots
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;
};

/**
 * Describes the message GameEvent.EmergencyStop.
 * Use `create(GameEvent_EmergencyStopSchema)` to create a new message.
 */
export const GameEvent_EmergencyStopSchema: GenMessage<GameEvent_EmergencyStop> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 37);

/**
 * a team has too many robots on the field
 *
 * @generated from message GameEvent.TooManyRobots
 */
export type GameEvent_TooManyRobots = Message<"GameEvent.TooManyRobots"> & {
  /**
   * the team that has too many robots
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * number of robots allowed at the moment
   *
   * @generated from field: optional int32 num_robots_allowed = 2;
   */
  numRobotsAllowed: number;

  /**
   * number of robots currently on the field
   *
   * @generated from field: optional int32 num_robots_on_field = 3;
   */
  numRobotsOnField: number;

  /**
   * the location of the ball at the moment when this foul occurred [m]
   *
   * @generated from field: optional Vector2 ball_location = 4;
   */
  ballLocation?: Vector2;
};

/**
 * Describes the message GameEvent.TooManyRobots.
 * Use `create(GameEvent_TooManyRobotsSchema)` to create a new message.
 */
export const GameEvent_TooManyRobotsSchema: GenMessage<GameEvent_TooManyRobots> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 38);

/**
 * a robot chipped the ball over the field boundary out of the playing surface
 *
 * @generated from message GameEvent.BoundaryCrossing
 */
export type GameEvent_BoundaryCrossing = Message<"GameEvent.BoundaryCrossing"> & {
  /**
   * the team that has too many robots
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the location of the ball [m]
   *
   * @generated from field: optional Vector2 location = 2;
   */
  location?: Vector2;
};

/**
 * Describes the message GameEvent.BoundaryCrossing.
 * Use `create(GameEvent_BoundaryCrossingSchema)` to create a new message.
 */
export const GameEvent_BoundaryCrossingSchema: GenMessage<GameEvent_BoundaryCrossing> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 39);

/**
 * the penalty kick failed (by time or by keeper)
 *
 * @generated from message GameEvent.PenaltyKickFailed
 */
export type GameEvent_PenaltyKickFailed = Message<"GameEvent.PenaltyKickFailed"> & {
  /**
   * the team that last touched the ball
   *
   * @generated from field: required Team by_team = 1;
   */
  byTeam: Team;

  /**
   * the location of the ball at the moment of this event [m]
   *
   * @generated from field: optional Vector2 location = 2;
   */
  location?: Vector2;

  /**
   * an explanation of the failure
   *
   * @generated from field: optional string reason = 3;
   */
  reason: string;
};

/**
 * Describes the message GameEvent.PenaltyKickFailed.
 * Use `create(GameEvent_PenaltyKickFailedSchema)` to create a new message.
 */
export const GameEvent_PenaltyKickFailedSchema: GenMessage<GameEvent_PenaltyKickFailed> = /*@__PURE__*/
  messageDesc(file_ssl_gc_game_event, 0, 40);

/**
 * @generated from enum GameEvent.Type
 */
export enum GameEvent_Type {
  /**
   * @generated from enum value: UNKNOWN_GAME_EVENT_TYPE = 0;
   */
  UNKNOWN_GAME_EVENT_TYPE = 0,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: BALL_LEFT_FIELD_TOUCH_LINE = 6;
   */
  BALL_LEFT_FIELD_TOUCH_LINE = 6,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: BALL_LEFT_FIELD_GOAL_LINE = 7;
   */
  BALL_LEFT_FIELD_GOAL_LINE = 7,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: AIMLESS_KICK = 11;
   */
  AIMLESS_KICK = 11,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA = 19;
   */
  ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA = 19,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: DEFENDER_IN_DEFENSE_AREA = 31;
   */
  DEFENDER_IN_DEFENSE_AREA = 31,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: BOUNDARY_CROSSING = 41;
   */
  BOUNDARY_CROSSING = 41,

  /**
   * triggered by GC
   *
   * @generated from enum value: KEEPER_HELD_BALL = 13;
   */
  KEEPER_HELD_BALL = 13,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: BOT_DRIBBLED_BALL_TOO_FAR = 17;
   */
  BOT_DRIBBLED_BALL_TOO_FAR = 17,

  /**
   * triggered by human ref
   *
   * @generated from enum value: BOT_PUSHED_BOT = 24;
   */
  BOT_PUSHED_BOT = 24,

  /**
   * triggered by human ref
   *
   * @generated from enum value: BOT_HELD_BALL_DELIBERATELY = 26;
   */
  BOT_HELD_BALL_DELIBERATELY = 26,

  /**
   * triggered by human ref
   *
   * @generated from enum value: BOT_TIPPED_OVER = 27;
   */
  BOT_TIPPED_OVER = 27,

  /**
   * triggered by human ref
   *
   * @generated from enum value: BOT_DROPPED_PARTS = 47;
   */
  BOT_DROPPED_PARTS = 47,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA = 15;
   */
  ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA = 15,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: BOT_KICKED_BALL_TOO_FAST = 18;
   */
  BOT_KICKED_BALL_TOO_FAST = 18,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: BOT_CRASH_UNIQUE = 22;
   */
  BOT_CRASH_UNIQUE = 22,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: BOT_CRASH_DRAWN = 21;
   */
  BOT_CRASH_DRAWN = 21,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: DEFENDER_TOO_CLOSE_TO_KICK_POINT = 29;
   */
  DEFENDER_TOO_CLOSE_TO_KICK_POINT = 29,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: BOT_TOO_FAST_IN_STOP = 28;
   */
  BOT_TOO_FAST_IN_STOP = 28,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: BOT_INTERFERED_PLACEMENT = 20;
   */
  BOT_INTERFERED_PLACEMENT = 20,

  /**
   * triggered by GC
   *
   * @generated from enum value: EXCESSIVE_BOT_SUBSTITUTION = 48;
   */
  EXCESSIVE_BOT_SUBSTITUTION = 48,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: POSSIBLE_GOAL = 39;
   */
  POSSIBLE_GOAL = 39,

  /**
   * triggered by GC
   *
   * @generated from enum value: GOAL = 8;
   */
  GOAL = 8,

  /**
   * triggered by GC
   *
   * @generated from enum value: INVALID_GOAL = 42;
   */
  INVALID_GOAL = 42,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: ATTACKER_DOUBLE_TOUCHED_BALL = 14;
   */
  ATTACKER_DOUBLE_TOUCHED_BALL = 14,

  /**
   * triggered by autoRef
   *
   * @generated from enum value: PLACEMENT_SUCCEEDED = 5;
   */
  PLACEMENT_SUCCEEDED = 5,

  /**
   * triggered by GC and autoRef
   *
   * @generated from enum value: PENALTY_KICK_FAILED = 43;
   */
  PENALTY_KICK_FAILED = 43,

  /**
   * triggered by GC
   *
   * @generated from enum value: NO_PROGRESS_IN_GAME = 2;
   */
  NO_PROGRESS_IN_GAME = 2,

  /**
   * triggered by GC
   *
   * @generated from enum value: PLACEMENT_FAILED = 3;
   */
  PLACEMENT_FAILED = 3,

  /**
   * triggered by GC
   *
   * @generated from enum value: MULTIPLE_CARDS = 32;
   */
  MULTIPLE_CARDS = 32,

  /**
   * triggered by GC
   *
   * @generated from enum value: MULTIPLE_FOULS = 34;
   */
  MULTIPLE_FOULS = 34,

  /**
   * triggered by GC
   *
   * @generated from enum value: BOT_SUBSTITUTION = 37;
   */
  BOT_SUBSTITUTION = 37,

  /**
   * triggered by GC
   *
   * @generated from enum value: TOO_MANY_ROBOTS = 38;
   */
  TOO_MANY_ROBOTS = 38,

  /**
   * triggered by GC
   *
   * @generated from enum value: CHALLENGE_FLAG = 44;
   */
  CHALLENGE_FLAG = 44,

  /**
   * triggered by GC
   *
   * @generated from enum value: CHALLENGE_FLAG_HANDLED = 46;
   */
  CHALLENGE_FLAG_HANDLED = 46,

  /**
   * triggered by GC
   *
   * @generated from enum value: EMERGENCY_STOP = 45;
   */
  EMERGENCY_STOP = 45,

  /**
   * triggered by human ref
   *
   * @generated from enum value: UNSPORTING_BEHAVIOR_MINOR = 35;
   */
  UNSPORTING_BEHAVIOR_MINOR = 35,

  /**
   * triggered by human ref
   *
   * @generated from enum value: UNSPORTING_BEHAVIOR_MAJOR = 36;
   */
  UNSPORTING_BEHAVIOR_MAJOR = 36,

  /**
   * @generated from enum value: PREPARED = 1 [deprecated = true];
   * @deprecated
   */
  PREPARED = 1,

  /**
   * @generated from enum value: INDIRECT_GOAL = 9;
   */
  INDIRECT_GOAL = 9,

  /**
   * @generated from enum value: CHIPPED_GOAL = 10 [deprecated = true];
   * @deprecated
   */
  CHIPPED_GOAL = 10,

  /**
   * @generated from enum value: KICK_TIMEOUT = 12 [deprecated = true];
   * @deprecated
   */
  KICK_TIMEOUT = 12,

  /**
   * @generated from enum value: ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA = 16;
   */
  ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA = 16,

  /**
   * @generated from enum value: ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED = 40;
   */
  ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED = 40,

  /**
   * @generated from enum value: BOT_CRASH_UNIQUE_SKIPPED = 23 [deprecated = true];
   * @deprecated
   */
  BOT_CRASH_UNIQUE_SKIPPED = 23,

  /**
   * @generated from enum value: BOT_PUSHED_BOT_SKIPPED = 25 [deprecated = true];
   * @deprecated
   */
  BOT_PUSHED_BOT_SKIPPED = 25,

  /**
   * 部分进入禁区触球
   *
   * @generated from enum value: DEFENDER_IN_DEFENSE_AREA_PARTIALLY = 30;
   */
  DEFENDER_IN_DEFENSE_AREA_PARTIALLY = 30,

  /**
   * @generated from enum value: MULTIPLE_PLACEMENT_FAILURES = 33 [deprecated = true];
   * @deprecated
   */
  MULTIPLE_PLACEMENT_FAILURES = 33,
}

/**
 * Describes the enum GameEvent.Type.
 */
export const GameEvent_TypeSchema: GenEnum<GameEvent_Type> = /*@__PURE__*/
  enumDesc(file_ssl_gc_game_event, 0, 0);

